This file describes the changes in design between SimpleDB and the database
implemented in our project, CS4432_Project1

OVERVIEW

		Our implementation of the simpleDB utilizes a clock replacement policy
	and a HashMap for keeping track of full buffers rather than just using a 
	scan of the buffer pool for both methods. They are implemented in the class
	AdvancedBufferMgr.java (henceforth refered to as Advanced) class, in the 
	methods chooseUnpinnedBuffer() and findExistingBuffer(Block blk).
	
		AdvancedBufferMgr contains the HashMap that stores references to buffers 
	kept in the bufferpool. The key for each buffer is the hash of the block stored
	found by calling blk.hash(). If Advanced ever needs to find a block that
	is already within a buffer in the bufferpool, it accesses the HashMap using 
	the hash of the block it is looking for, a more efficient process than 
	scanning. We maintain the constraint that if a (Integer,Buffer) pair (K,V)
	is in the HashMap, then the Buffer V is not empty and Buffer.block().hashCode
	is equal to K. findExistingBuffer(Block blk) is overriden so that it now checks 
	that its block argument is not null, and if its hashcode is the HashMap, 
	findExistingBuffer returns the buffer with that key in the HashMap.  
	
		AdvancedBufferMgr has a superclass, BasicBufferMgr, which stores the
	bufferpool and number of buffers that are not pinned, as well as the
	additional functions flushAll() and available() which remain unchanged. 
	We take advantage of the "IS-A" relationship between the Advanced and Basic
	Buffer Managers in order to make sure that simpleDB is still functional, 
	since any function that interacts with our AdvancedBufferMgr will does it 
	through a BasicBufferMgr reference (in particular this occurs in BufferMgr.java, 
	where the AdvancedBufferMgr is instantiated). 
	
		The methods pin() and pinNew() are largely unchanged from the versions in 
	BasicBufferMgr.java; we only add functionality to maintain the fullBuffers 
	HashMap (adding and removing key-value pairs as needed) and to set the second
	chance bits of the buffers they return to true (pinning a block should 
	turn the second chance bit on). 
	
		The clock replacement policy is implemented in the method 
	chooseUnpinnedBuffer(). When the bufferpool is full, with not all of the buffers
	pinned, the replacement policy is used to decide which buffer to overwrite. The in
	attribute index in AdvancedBufferMgr.java points to the most recent object that was 
	added to bufferpool (that wasn't in the pool before). The index cycles through the
	array, incremented modulo bufferpool.length.
	
		If there are unpinned buffers, chooseUnpinnedBuffer() looks to see if the adjacent 
	buffer (i.e. bufferpool[(index+1) % bufferpool.length]) is empty before trying to replace 
	a buffer. As a result, chooseUnPinned buffer will return the adjacent empty buffer
	(in O(1) time) until there are no longer any empty spaces in the buffer pool. 
	
		We make the assumption that no unknown component of the database deletes blocks from frames
	(i.e. makes a full buffer an empty buffer). Since the classes that interact with 
	AdvancedBufferManager do not remove blocks from buffers, the only time that blocks 
	are removed from blocks is as part of the replacement policy. This means that
	Once the buffer fills up for the first time, there will never be an empty space in 
	the buffer again. 
		
		If the bufferpool has no empty spaces and not all buffers are pinned, the clock 
	replacement policy is enacted as follows:
		
		1. Check the buffer currently pointed at by the index. 
		
			If the buffer is pinned, do nothing and go to 2.
			
			If the buffer is not pinned, but its second chance bit is set to true,
			set the buffers second chance bit to false and go to 2. 
			
			If the buffer is not pinned, and its second chance bit is set to false,
				Return the buffer at current index (do not increment index).
			
		2. Set index = (index + 1) % bufferpool.length.
		
		For example, suppose the last buffer was just filled, with each buffer unpinned,
	the second chance bit of each buffer set to true, and index pointing to the buffer B with 
	the most recently added block. If chooseUnpinnedBuffer were to be called, it would start 
	by setting the second chance bit of B to false, and then it would pass over each buffer in
	the pool, setting each second chance bit to false, until it returns to B. B would be the 
	first buffer encountered with second chance bit false, so its block would be replaced. After 
	replacement the final state for the pool would be B with the new block, now pinned and with
	second chance bit true, and with each other buffer in the pool still unpinned but now with 
	second chance bit set to false. 
		
		If there are no unpinned buffers, chooseUnpinnedBuffer returns null. 
	
		Each buffer in the bufferpool tracks its own pin status. This was, in fact,
	implemented by default in simpledb as a pin counter, which increments with pins and
	decrements with unpins. The pin status can be accessed by Advanced using the
	isPinned() method of Buffer, which returns true if the pin count is greater than 0. The 
	buffer pin and unpin methods are called by AdvancedBufferMgr (inherited) and BufferMgr.
	
	
		The simpledb also had already implemented the "dirty bit" in the Buffer class,
	as an int, modifiedBy, that holds either a transaction number or -1. If a block
	in the buffer was replaced during a pin() (assignToBlock is called in Buffer, and
	assignToBlock calls flush) Buffer will check whether its modifiedBy attribute was changed. 
	Buffer will call BasicBufferMgr.flush(), which writes the changes to disk if modifiedBy is 
	>=0 (i.e. it is the number of a transaction that modified the page), or do nothing if 
	modifiedBy=-1 (i.e. the page is clean). 
	
	We also added functionality to buffer to suppress its output and input to disk, allowing us to 
	test out buffer manager without the database itself. 


The following files were added to the database in CS4432_Project1
	- src/simpledb.buffer/AdvancedBufferMgr.java
	- src/simpledb.buffer/AdvancedBufferMgrTest.java
	- studentClient/simpledb/Examples.java

The following files include major modifications affecting the functionality
of the databased
	- BasicBufferMgr.java
	- Buffer.java
	- BufferMgr.java	

AdvancedBufferMgr.java
	This class extends BasicBufferMgr.java. When constructed, AdvancedBufferMgr
	constructs a BasicBufferMgr using the provided numbuffs.
	
AdvancedBufferMgrTest.java
	This class is used to test the functionality of the AdvancedBufferMgr. This
	class creates instances of AdvancedBufferMgr and fills their bufferpools
	with set files. The class then calls various pin, flush, and printing
	functions to determine the state of the bufferpool and whether certain
	methods acted as intended.
	For more information, refer to the documentation within
	AdvancedBufferMgrTest.java
	
	
BasicBufferMgr.java
	
	This class is overridden by AdvancedBufferMgr.java for the following methods:
		- chooseUnpinnedBuffer() 
		- findExistingBuffer()
		- pinNew()
		- pin()
		- toString()
		
		
Buffer.java	

	Added a secondChance attribute to track whether the block inside the buffer may
	be relaced during a pin operation. This tracking is necessary for implementing
	a clock replacement policy
		hasSecondChance(): returns the secondChance attribute
		setSecondChance(bool): sets the secondChance attribute to the given bool
		
	Added a buffID attribute to the buffer that is set upon construction and is
	unique to each buffer. The buffID identifies buffers during testing.
		id(): returns the value of buffID
	
	Added a diskInteraction attribute to track whether the buffer was made for testing
	purposes. If diskInteraction is true, the following methods do not write to disk
	when called:
		setString()
		flush()
		assignToBlock()
		assignToNew()
	
	